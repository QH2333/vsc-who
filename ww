#!/usr/bin/python3

import os

w_first_line = ""


class UserEntry:
    def __init__(self, user, pid, tty, from_, since, command):
        self.user = user
        self.pid = pid
        self.tty = tty
        self.from_ = from_
        self.since = since
        self.command = command


def collect_from_w(users: list):
    global w_first_line
    w_ret_val = os.popen("w")
    w_ret_val_unpack = [line for line in w_ret_val]
    w_first_line = w_ret_val_unpack[0].strip()
    for line in w_ret_val_unpack[2:]:
        split_result = line.split()
        users.append(UserEntry(
            user=split_result[0],
            pid="Unknown",
            tty=split_result[1],
            from_=split_result[2],
            since=split_result[3],
            command=" ".join(split_result[7:])))
    return


def collect_from_who(users: list):
    os.environ["LANG"] = "en_US.UTF-8"
    who_ret_val = os.popen("who")
    for line in who_ret_val:
        split_result = line.split()
        for user in users:
            if user.user == split_result[0] and user.tty == split_result[1]:
                user.since = " ".join(split_result[2:4])
                break
    return


def collect_from_ps(users: list):
    os.environ["LANG"] = "en_US"
    ps_ret_val = os.popen("ps -aux | grep vsc | grep ptyHost | grep -v grep")
    for line in ps_ret_val:
        split_result = line.split()
        user = split_result[0]
        ptyHost_pid = split_result[1]
        since = split_result[8]
        command = " ".join(split_result[11:])
        pstree_ret_val = os.popen("pstree -ApT {} | grep bash".format(ptyHost_pid))
        pstree_ret_val_unpack = [line.strip() for line in pstree_ret_val]
        if len(pstree_ret_val_unpack) == 0:
            users.append(UserEntry(
                user=user,
                pid=ptyHost_pid,
                tty="Unknown",
                from_="Unknown",
                since=since,
                command=command))
            return
        for line in pstree_ret_val_unpack:
            child_pid = line.replace(")","").replace("("," ").split()[-1]
            child_ps_ret_val = os.popen("ps -aux | awk '$2=={} {}'".format(child_pid, "{print}"))
            child_ps_ret_val = [line for line in child_ps_ret_val]
            if len(child_ps_ret_val) == 0:
                continue
            split_result = child_ps_ret_val[0].split()
            tty = split_result[6]
            stat_ret_val = os.popen("stat -c %y /proc/{}".format(child_pid))
            stat_ret_val = [line for line in stat_ret_val][0]
            since = stat_ret_val[:16]
            command = " ".join(split_result[10:])
            if len(command) > 80:
                command = command[:80] + "..."
            users.append(UserEntry(
                user=user,
                pid=child_pid,
                tty=tty,
                from_="Unknown",
                since=since,
                command=command))
    return


def main():
    ssh_users = []
    collect_from_w(ssh_users)
    print(w_first_line)
    collect_from_who(ssh_users)
    print("\033[0;33m===== Users logged in via SSH =====\033[0m")
    print("\033[4;37m{:10}{:10}{:17}{:18}{}\033[0m".format(
        "User", "TTY", "From", "Since", "Command"))
    for user in ssh_users:
        print("{:10}{:10}{:17}{:18}{}".format(
            user.user, user.tty, user.from_, user.since, user.command))

    vsc_users = []
    collect_from_ps(vsc_users)
    print("\033[0;33m===== Users logged in via VSC remote SSH =====\033[0m")
    print("\033[4;37m{:10}{:10}{:17}{:18}{}\033[0m".format(
        "User", "TTY", "From", "Since", "Command"))
    for user in vsc_users:
        print("{:10}{:10}{:17}{:18}{}".format(
            user.user, user.tty, user.from_, user.since, user.command))


if __name__ == "__main__":
    main()
